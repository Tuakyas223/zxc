#include <ctime>
#include <fstream>
#include <iomanip>
#include <iostream>
#include <openssl/evp.h> // Modern OpenSSL API
#include <sstream>
#include <string>
#include <sys/stat.h>
#include <unistd.h>
#include <vector>

using namespace std;

// === –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ===
string read_file(const string &path) {
  ifstream file(path, ios::binary);
  if (!file)
    return "";
  ostringstream buf;
  buf << file.rdbuf();
  return buf.str();
}

string sha256(const string &data) {
  unsigned char hash[EVP_MAX_MD_SIZE];
  unsigned int length;

  EVP_MD_CTX *ctx = EVP_MD_CTX_new();
  if (!ctx)
    return "";

  EVP_DigestInit_ex(ctx, EVP_sha256(), nullptr);
  EVP_DigestUpdate(ctx, data.c_str(), data.size());
  EVP_DigestFinal_ex(ctx, hash, &length);
  EVP_MD_CTX_free(ctx);

  stringstream ss;
  for (unsigned int i = 0; i < length; i++) {
    ss << hex << setw(2) << setfill('0') << (int)hash[i];
  }
  return ss.str();
}

bool file_exists(const string &path) { return access(path.c_str(), F_OK) == 0; }

// === –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞—â–∏—â—ë–Ω–Ω–æ–≥–æ –±–∏–Ω–∞—Ä–Ω–∏–∫–∞ ===
void generate_protected_binary(const string &binary_path,
                               const vector<int> &methods) {
  ofstream out("protected_app.cpp");
  if (!out) {
    cerr << "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª protected_app.cpp\n";
    return;
  }

  string binary_data = read_file(binary_path);
  if (binary_data.empty()) {
    cerr << "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ü–µ–ª–µ–≤–æ–π —Ñ–∞–π–ª\n";
    return;
  }

  string binary_hash = sha256(binary_data);

  // –ö–æ–¥–∏—Ä—É–µ–º –±–∏–Ω–∞—Ä–Ω–∏–∫ –∫–∞–∫ –º–∞—Å—Å–∏–≤ –±–∞–π—Ç
  ostringstream encoded;
  for (unsigned char c : binary_data) {
    encoded << "0x" << hex << setw(2) << setfill('0') << (int)c << ",";
  }

  // === –ì–µ–Ω–µ—Ä–∞—Ü–∏—è C++ –æ–±—ë—Ä—Ç–∫–∏ ===
  out << R"(
#include <iostream>
#include <vector>
#include <string>
#include <fstream>
#include <sys/stat.h>
#include <unistd.h>
#include <csignal>
#include <ctime>
#include <iomanip>
#include <sstream>
#include <openssl/evp.h>

using namespace std;

const string ORIGINAL_HASH = ")";
  out << binary_hash;
  out << R"(";

const unsigned char PAYLOAD[] = {
)";
  out << encoded.str() << "\n};\n";
  out << "const size_t PAYLOAD_SIZE = " << binary_data.size() << ";\n";

  out << R"(
string sha256(const string& data) {
    unsigned char hash[EVP_MAX_MD_SIZE];
    unsigned int length;
    EVP_MD_CTX* ctx = EVP_MD_CTX_new();
    if (!ctx) return "";
    EVP_DigestInit_ex(ctx, EVP_sha256(), nullptr);
    EVP_DigestUpdate(ctx, data.c_str(), data.size());
    EVP_DigestFinal_ex(ctx, hash, &length);
    EVP_MD_CTX_free(ctx);
    stringstream ss;
    for (unsigned int i = 0; i < length; i++)
        ss << hex << setw(2) << setfill('0') << (int)hash[i];
    return ss.str();
}

void create_temp_binary(const unsigned char* data, size_t size, const string& path) {
    ofstream file(path, ios::binary);
    file.write(reinterpret_cast<const char*>(data), size);
    file.close();
    chmod(path.c_str(), 0755);
}

bool check_integrity() {
    string payload((char*)PAYLOAD, PAYLOAD_SIZE);
    return sha256(payload) == ORIGINAL_HASH;
}

bool check_expiry(const string& expiry_date) {
    time_t now = time(0);
    struct tm expiry_tm = {};
    istringstream ss(expiry_date);
    ss >> get_time(&expiry_tm, "%Y-%m-%d");
    time_t expiry = mktime(&expiry_tm);
    return now <= expiry;
}

bool check_password(const string& correct_hash) {
    cout << "üîê –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å: ";
    string pass;
    cin >> pass;
    return sha256(pass) == correct_hash;
}

bool check_single_run() {
    string lockfile = "/tmp/." + string(getenv("USER")) + "_app.lock";
    if (file_exists(lockfile)) {
        cout << "‚ùå –ü—Ä–æ–≥—Ä–∞–º–º–∞ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞.\n";
        return false;
    }
    ofstream(lockfile) << getpid();
    signal(SIGINT, [](int) {
        remove(("/tmp/." + string(getenv("USER")) + "_app.lock").c_str());
        exit(0);
    });
    atexit([]() {
        remove(("/tmp/." + string(getenv("USER")) + "_app.lock").c_str());
    });
    return true;
}

bool file_exists(const string& path) {
    return access(path.c_str(), F_OK) == 0;
}

int main() {
    string temp_path = "/tmp/.protected_app_temp_" + to_string(getpid());

    // --- –ú–µ—Ç–æ–¥—ã –∑–∞—â–∏—Ç—ã ---
)";

  // === –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –º–µ—Ç–æ–¥—ã –≤ switch —Å –±–ª–æ–∫–∞–º–∏ ===
  for (int method : methods) {
    switch (method) {
    case 1: {
      out << R"(
    if (!check_integrity()) {
        cout << "‚ùå –û—à–∏–±–∫–∞: —Ñ–∞–π–ª –ø–æ–≤—Ä–µ–∂–¥—ë–Ω –∏–ª–∏ –∏–∑–º–µ–Ω—ë–Ω!\n";
        return 1;
    }
)";
      break;
    }
    case 2: {
      string password;
      cout << "üîê –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –ø—Ä–æ–≥—Ä–∞–º–º—ã: ";
      cin >> password;
      out << "    if (!check_password(\"" << sha256(password) << "\")) {\n";
      out << R"(        cout << "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å!\n";
        return 1;
    }
)";
      break;
    }
    case 3: {
      string expiry;
      cout << "üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è (YYYY-MM-DD): ";
      cin >> expiry;
      out << "    if (!check_expiry(\"" << expiry << "\")) {\n";
      out << R"(        cout << "‚ùå –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã –∏—Å—Ç—ë–∫.\n";
        return 1;
    }
)";
      break;
    }
    case 4: {
      out << R"(
    if (!check_single_run()) {
        return 1;
    }
)";
      break;
    }
    default:
      break;
    }
  }

  out << R"(
    // --- –ó–∞–ø—É—Å–∫ —Ü–µ–ª–µ–≤–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã ---
    create_temp_binary(PAYLOAD, PAYLOAD_SIZE, temp_path);
    cout << "üöÄ –ó–∞–ø—É—Å–∫ –∑–∞—â–∏—â—ë–Ω–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã...\n";
    execl(temp_path.c_str(), "app", nullptr);

    cout << "‚ùå –ó–∞–ø—É—Å–∫ –Ω–µ —É–¥–∞–ª—Å—è.\n";
    remove(temp_path.c_str());
    return 1;
}
)";

  out.close();
  cout << "‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω —Ñ–∞–π–ª protected_app.cpp\n";
}

// === –ú–µ–Ω—é ===
void show_menu() {
  cout << "\nüõ°Ô∏è  –ü—Ä–æ—Ç–µ–∫—Ç–æ—Ä –Ω–∞ C++ (Linux)\n";
  cout << "–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ç–æ–¥—ã –∑–∞—â–∏—Ç—ã:\n";
  cout << "1) –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏\n";
  cout << "2) –ü–∞—Ä–æ–ª—å –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ\n";
  cout << "3) –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è\n";
  cout << "4) –ó–∞—â–∏—Ç–∞ –æ—Ç –º–Ω–æ–≥–æ–∫—Ä–∞—Ç–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞\n";
  cout << "0) –ì–æ—Ç–æ–≤–æ\n";
}

int main() {
  string binary_path;
  cout << "–í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –∫ –∏—Å–ø–æ–ª–Ω—è–µ–º–æ–º—É —Ñ–∞–π–ª—É: ";
  cin >> binary_path;

  if (!file_exists(binary_path)) {
    cerr << "‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: " << binary_path << endl;
    return 1;
  }

  vector<int> methods;
  int choice;

  while (true) {
    show_menu();
    cout << "–í—ã–±–µ—Ä–∏—Ç–µ: ";
    cin >> choice;

    if (choice == 0)
      break;
    if (choice >= 1 && choice <= 4) {
      methods.push_back(choice);
      cout << "‚úÖ –ú–µ—Ç–æ–¥ " << choice << " –¥–æ–±–∞–≤–ª–µ–Ω.\n";
    } else {
      cout << "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä.\n";
    }
  }

  if (methods.empty()) {
    cout << "‚ùå –ù–µ –≤—ã–±—Ä–∞–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞.\n";
    return 1;
  }

  generate_protected_binary(binary_path, methods);

  // –ö–æ–º–ø–∏–ª—è—Ü–∏—è
  cout << "üîß –ö–æ–º–ø–∏–ª–∏—Ä—É–µ–º –∑–∞—â–∏—â—ë–Ω–Ω—ã–π –±–∏–Ω–∞—Ä–Ω–∏–∫...\n";
  int result = system("g++ protected_app.cpp -o protected_app -lssl -lcrypto");
  if (result != 0) {
    cerr << "‚ùå –û—à–∏–±–∫–∞ –∫–æ–º–ø–∏–ª—è—Ü–∏–∏ protected_app\n";
    return 1;
  }

  cout << "üßπ –£–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª protected_app.cpp? (y/n): ";
  char cleanup;
  cin >> cleanup;
  if (cleanup == 'y' || cleanup == 'Y') {
    system("rm protected_app.cpp");
  }

  cout << "\nüéâ –ì–æ—Ç–æ–≤–æ! –ó–∞–ø—É—Å–∫–∞–π—Ç–µ –∑–∞—â–∏—â—ë–Ω–Ω—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É:\n";
  cout << "    ./protected_app\n";
  return 0;
}